#!/usr/bin/python

import os.path
import sys
import socket
import requests
from datetime import datetime

try:
   stats = requests.get('http://localhost:8080/api/v1.2/docker/',timeout=10).json()
except:
   print 'Unable to obtain cadvisor docker monitoring stats'
   sys.exit(1)

try:
   state = requests.get('http://localhost:5051/state.json',timeout=10).json()
except:
   print 'Unable to obtain mesos state'
   sys.exit(1)

hostname = socket.gethostname()

tasks = {}

for framework in state["frameworks"]:
   for executor in framework["executors"]:
      count = 0
      for task in executor['tasks']:
         labelstr = ''
         if 'labels' in task:
            labels = task['labels']
            for label in labels:
               if len(labelstr) > 0:
                  labelstr += ';'
               labelstr += label['key'] + ':' + label['value']
         count += 1
         info = {}
         info['name'] = task['name']
         info['id'] = task['id']
         info['labels'] = labelstr
         tasks[executor['container']] = info
      if count > 1:
         print 'WARNING: multiple tasks in single executor'

data = ''
tasksPerApp = {}

for container in stats:
   info = stats[container]
   isMesos = 0
   for alias in info['aliases']:
      if 'mesos' in alias:
         myAlias = alias
         isMesos = 1
   if isMesos == 1:
      containerId = myAlias.split('.')[1]
      if containerId in tasks:
         info = tasks[containerId]
         statistics = stats[container]['stats']

         if info['name'] in tasksPerApp:
            tasksPerApp[info['name']] += 1
         else:
            tasksPerApp[info['name']] = 1

         basic = 'app=' + info['name'] + \
                 ',id=' + info['id'] + \
                 ',host=' + hostname
         if len(info['labels']) > 0:
            basic += ',labels=' + info['labels']

         if 'NO_METRICS' not in basic:
            # Limits
            data += 'mesos_task_limits,' + basic + \
                    ' cpu=' + str(stats[container]['spec']['cpu']['limit']) + \
                    ',memory=' + str(stats[container]['spec']['memory']['limit']) + '\n'

            data += 'num_tasks,' + basic + ' value=1\n'

            for stime in statistics:
               p = '%Y-%m-%dT%H:%M:%S'
               epoch = datetime(1970, 1, 1)
               timestamp = "%d" % ((datetime.strptime(stime['timestamp'].split('.')[0], p) - epoch).total_seconds()*1e+9)

               # Disk I/O, network, memory & CPU
               data += 'mesos_task_usage,' + basic + \
                       ' diskio_serviced_total=' + str(stime['diskio']['io_serviced'][0]['stats']['Total']) + \
                       ',diskio_serviced_read=' + str(stime['diskio']['io_serviced'][0]['stats']['Read']) + \
                       ',diskio_serviced_write=' + str(stime['diskio']['io_serviced'][0]['stats']['Write']) + \
                       ',diskio_service_bytes_total=' + str(stime['diskio']['io_service_bytes'][0]['stats']['Total']) + \
                       ',diskio_service_bytes_read=' + str(stime['diskio']['io_service_bytes'][0]['stats']['Read']) + \
                       ',diskio_service_bytes_write=' + str(stime['diskio']['io_service_bytes'][0]['stats']['Write']) + \
                       ',rx_bytes=' + str(stime['network']['rx_bytes']) + \
                       ',rx_packets=' + str(stime['network']['rx_packets']) + \
                       ',rx_errors=' + str(stime['network']['rx_errors']) + \
                       ',rx_dropped=' + str(stime['network']['rx_dropped']) + \
                       ',tx_bytes=' + str(stime['network']['tx_bytes']) + \
                       ',tx_packets=' + str(stime['network']['tx_packets']) + \
                       ',tx_errors=' + str(stime['network']['tx_errors']) + \
                       ',tx_dropped=' + str(stime['network']['tx_dropped']) + \
                       ',memory_usage=' + str(stime['memory']['usage']) + \
                       ',memory_cache=' + str(stime['memory']['cache']) + \
                       ',memory_rss=' + str(stime['memory']['rss']) + \
                       ',memory_working_set=' + str(stime['memory']['working_set']) + \
                       ',cpu_usage_total=' + str(stime['cpu']['usage']['total']) + \
                       ',cpu_usage_system=' + str(stime['cpu']['usage']['system']) + \
                       ',cpu_usage_user=' + str(stime['cpu']['usage']['user']) + \
                       ',load_average=' + str(stime['cpu']['load_average']) + ' ' + timestamp + '\n'

               # Custom metrics
               if 'custom_metrics' in stime:
                  metrics = stime['custom_metrics']
                  for metric in metrics:
                     if 'float_value' in stime['custom_metrics'][metric][0]:
                        data += 'custom_metric,metric=' + metric + ',' + basic + \
                                ' value=' + str(stime['custom_metrics'][metric][0]['float_value']) + ' ' + timestamp + '\n'
                     if 'int_value' in stime['custom_metrics'][metric][0]:
                        data += 'custom_metric,metric=' + metric + ',' + basic + \
                                ' value=' + str(stime['custom_metrics'][metric][0]['int_value']) + ' ' + timestamp + '\n'

print data
